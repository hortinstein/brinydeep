{"ts":1368496336232,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var request = require('request');\nvar async = require('async');\n\nvar brinydeep = {};\nmodule.exports = brinydeep;\n\nvar api_key= \"\";\nvar client_id = \"\"; \nvar cred_string = \"\";\nvar host_string = \"https://api.digitalocean.com/\"\n\n\nvar send_request = function (urls,callback) {\n\t//console.log(urls)\n  var req = function (url,callback) {\n  \trequest(url,function (e,o) {\n\t\t\to = JSON.parse(o.body);\t\n\t\t\tif (o.status === 'ERROR') {\n\t\t\t\tcallback(o.description,o);\n\t\t\t} else {\n\t\t\t\tcallback(e,o);\t\n\t\t\t}\n\t\t});\n  }\n\tif (Array.isArray(urls)){\n\t\tasync.map(urls, req, function (e,r) {\n\t\t\tcallback(e,r);\n\t\t});\n\t} else {\n\t\treq(urls,callback);\n\t}\n\t\n}\n\nvar build_requests = function (type, api_path,arg) {\n\tif (type === undefined){ type = '/'};\n\tif (Array.isArray(arg)){\n\t\tvar reqs = [];\n\t\tfor (var item in arg){\n\t\t\treqs.push(host_string+'/'+type+'/'+arg[item]+'/'+api_path+'/?'+cred_string);\n\t\t}\n\t\treturn reqs;\n\t} \n\telse return host_string+'/'+type+'/'+arg+'/'+api_path+'/?'+cred_string;\n}\n\nbrinydeep.setup = function  (sclient_id,sapi_key) {\n\tapi_key = sapi_key;\n\tclient_id = sclient_id;\n\tcred_string = \"client_id=\" + client_id + \"&api_key=\" + api_key;\n}\n\n\n/////////////////\n//Documentation//\n/////////////////\nbrinydeep.documentation = function  (callback) {\n\tvar req = host_string+ cred_string;\n\trequest(req,function (e,o) {\n\t\to = o.body\n\t\t//console.log(e,o);\n\t\tcallback(e,o);\n\t});\n};\n\n\n////////////\n//Droplets//\n////////////\nbrinydeep.get_ids = function (callback) {\n\tvar req = host_string+ \"/droplets/?\" + cred_string\n\tsend_request(req,function (e,o) {\n\t\tif (e) { callback(e) }\n\t\telse {\n\t\t\tvar ids = [];\n\t\t\to.droplets.forEach(function (machine){\n\t\t\t\tids.push(machine.id);\n\t\t\t});\n\t\t\tcallback(e,ids);\n\t\t};\n\t});\n}\nbrinydeep.show_active = function (callback) {\n\tvar req = host_string+ \"/droplets/?\" + cred_string\n\tsend_request(req,callback);\n}\n\nbrinydeep.show_droplets = function (droplet_ids, callback) {\n\tvar reqs = build_requests('droplets','',droplet_ids);\n\tsend_request(reqs,callback);\n};\n\n\n\n// name Required, String, this is the name of the droplet - must be formatted by hostname rules\n// size_id Required, Numeric, this is the id of the size you would like the droplet created at\n// image_id Required, Numeric, this is the id of the image you would like the droplet created with\n// region_id Required, Numeric, this is the id of the region you would like your server in IE: US/Amsterdam\n// ssh_key_ids Optional, Numeric CSV, comma separated list of ssh_key_ids that you would like to be added to the server\nvar build_machine_req = function (machine) {\n\tvar ret = \"/new?name=\"+machine.name+\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"&size_id=\"+machine.size_id+\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"&image_id=\"+machine.image_id+\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"&region_id=\"+machine.region_id+'&'+cred_string;\n\n\tif (machine.hasOwnProperty('ssh_key_ids')){\n\t\tret+=(\"&ssh_key_ids=\"+machine.ssh_key_ids);\n\t} \n\treturn ret;\n}\n\nbrinydeep.new_droplets = function (options,callback) {\n\tvar new_machine_req = \"\";\n\tif (options.hasOwnProperty('droplets')){\n\t\tvar new_machine_req = [];\n\t\toptions.droplets.forEach(function (machine){\n\t\t\t//console.log(machine)\n\t\t\tnew_machine_req.push( build_machine_req(machine));\n\t\t});\n\t} else {\n\t\tnew_machine_req = build_machine_req(options);\n\t}\n\toptions = build_requests('droplets','/',new_machine_req);\n\tsend_request(options,callback);\n\n\n};\n// droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.reboot = function (droplet_ids,callback) {\n\tvar reqs = build_requests('droplets','reboot',droplet_ids);\n\tsend_request(reqs,callback);\n};\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.power_cycle = function (droplet_ids,callback) {\n\tvar reqs = build_requests('droplets','power_cycle',droplet_ids);\n\tsend_request(reqs,callback);\n};\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.shut_down = function (droplet_ids,callback) {\n\tvar reqs = build_requests('droplets','shut_down',droplet_ids);\n\tsend_request(reqs,callback);\n};\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.power_off = function (droplet_ids,callback) {\n\tvar reqs = build_requests('droplets','power_off',droplet_ids);\n\tsend_request(reqs,callback);\n};\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.power_on = function (droplet_ids,callback) {\n\tvar reqs = build_requests('droplets','power_on',droplet_ids);\n\tsend_request(reqs,callback);\n};\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.reset_root_password = function (droplet_ids,callback) {\n\tvar reqs = build_requests('droplets','password_reset',droplet_ids);\n\tsend_request(reqs,callback);\n};\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.resize = function (droplet_ids,size_id,callback) {\n\tapi_req = 'resize/?size_id='+size_id+'&'+cred_string;\n\tvar reqs = build_requests('droplets',api_req,droplet_ids);\n\tsend_request(reqs,callback);\n};\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.snapshot = function (droplet_id,name,callback) {\n\tapi_req = droplet_id+'/snapshot/?name='+name+'&'+cred_string;\n\t\n\tsend_request(reqs,callback);\n};\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.restore = function (droplet_ids,name,callback) {\n\tapi_req = 'restore/?name='+name+'&'+cred_string;\n\tvar reqs = build_requests('droplets',api_req,droplet_ids);\n\tsend_request(reqs,callback);\n};\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.rebuild = function (droplet_ids,callback) {\n\tapi_req = 'rebuild/?image_id='+name+'&'+cred_string;\n\tvar reqs = build_requests('droplets',api_req,droplet_ids);\n\tsend_request(reqs,callback);\n};\n\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.enable_backups = function (droplet_ids,callback) {\n\tvar reqs = build_requests('droplets','enable_backups',droplet_ids);\n\tsend_request(reqs,callback);\n};\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.disable_backups = function (droplet_ids,callback) {\n\tvar reqs = build_requests('droplets','disable_backups',droplet_ids);\n\tsend_request(reqs,callback);\n};\n//image_id Required, Numeric, this is the id of the image you would like to use to rebuild your droplet with\nbrinydeep.destroy_all_droplets = function (callback) {\n\tbrinydeep.get_ids(function (e,o) {\n\t\tif (!e){\n\t\t\tvar reqs = build_requests('droplets','destroy',o)\n\t\t\tsend_request(reqs,callback)\n\t\t}\n\t})\n};\n\n//droplet_id(s) Required, Integer, this is the id of your droplet\nbrinydeep.destroy = function (droplet_ids,callback) {\n\tvar reqs = build_requests('droplets','destroy',droplet_ids);\n\tsend_request(reqs,callback)\n};\n\n///////////\n//Regions//\n///////////\nbrinydeep.regions = function (callback) {\n\tvar req = host_string+ \"/regions/?\" + cred_string\n\tsend_request(req,callback);\n};\n//////////\n//Images//\n//////////\nbrinydeep.all_images = function (callback) {\n\tvar req = host_string+ \"/images/?\" + cred_string\n\tsend_request(req,callback);\n};\n//image_id Required, Numeric, this is the id of the image you would like to use to rebuild your droplet with\nbrinydeep.show_images = function (image_ids, callback) {\n\tvar reqs = build_requests('images','/',image_ids);\n\tsend_request(reqs,callback)\n};\n//image_id Required, Numeric, this is the id of the image you would like to use to rebuild your droplet with\nbrinydeep.destroy_images = function (image_ids, callback) {\n\tvar reqs = build_requests('images','destroy',image_ids);\n\tsend_request(reqs,callback)\n};\n\n\n////////////\n//SSH Keys//\n////////////\nbrinydeep.all_ssh_keys = function (callback) {\n\tvar req = host_string+ \"/ssh_keys/?\" + cred_string\n\tsend_request(req,callback);\n};\n//ssh_key Required, Numeric, this is the id of the ssh key you would like to use to display\nbrinydeep.show_ssh_key = function (ssh_key_ids,callback) {\n\tvar reqs = build_requests('images','/',ssh_key_ids);\n\tsend_request(reqs,callback)\n};\n////////Coming soon with API///////////////////////////////////\n// brinydeep.add_ssh_key = function (ssh_key,callback) {\t\n// };\n// brinydeep.edit_ssh_key = function (ssh_key,callback) {\n// };\n// brinydeep.destroy_ssh_key = function (ssh_key,callback) {\n// };\n////////Coming soon with API///////////////////////////////////\n\nbrinydeep.sizes = function (callback) {\n\tvar req = host_string+ \"/sizes/?\" + cred_string\n\tsend_request(req,callback);\n}\n\nif(!module.parent) {\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":8330}]],"length":8330}
