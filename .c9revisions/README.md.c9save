{"ts":1368498456614,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# brinydeep\n=========\n\nnode.js wrapper for [Digital Ocean's API](https://api.digitalocean.com)\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install brinydeep\n```\n\n\n# example\n\n``` js\nvar brinydeep = require('brinydeep');\nbrinydeep.setup(CLIENT_KEY, API_KEY);\nvar new_droplet = {\n\tname: \"test1\",\n\tsize_id: 66,\n\timage_id: 25306,\n\tregion_id: 1\n};\nbrinydeep.new_droplets(new_droplet,function (e,o) {\n\tconsole.log(o);\n});\nbrinydeep.get_ids(function (e,o) {\n\ttemp_ids = o;\n});\n\n```\n\n# example with multiple machines\n\n``` js\nvar new_droplet_multi = {\n\tdroplets: [\n\t\t{\n\t\t\tname: \"test2\",\n\t\t\tsize_id: 66,\n\t\t\timage_id: 25306,\n\t\t\tregion_id: 1\n\t\t},\n\t\t{\n\t\t\tname: \"test3\",\n\t\t\tsize_id: 66,\n\t\t\timage_id: 25306,\n\t\t\tregion_id: 1\n\t\t}\n\t]\n};\nvar temp_ids = '';\n\nbrinydeep.new_droplets(new_droplet_multi,function (e,o) {\n\tconsole.log(o);\n});\nbrinydeep.get_ids(function (e,o) {\n\ttemp_ids = o;\n});\n\n```\n#TODO\n*SSH commands to hosts\n*Clean up test suite\n\n# API methods\n\n``` js\nvar brinydeep = require('brinydeep').setup(CLIENT_KEY, API_KEY);\n```\n\nThis sets up the API for use\n\n## brinydeep.documentation(callback)\n\nreturns the html for digitaloceans api \n\n## brinydeep.get_ids(callback)\n\nreturns an array of all the ids \n\n## brinydeep.show_active(callback)\n\nreturns active ids in Digital Oceans API form, (all functions taking IDs can be passed an array of IDs, and will return an array of seperate JSON responses).  \n\n``` js\n{\"status\":\"OK\",\"droplets\":[{\"backups_active\":null,\"id\":100823,\"image_id\":420,\"name\":\"test222\",\"region_id\":1,\"size_id\":33,\"status\":\"active\"}]}\n```\n\n## brinydeep.show_droplets(id,callback) or brinydeep.show_droplets([id,...],callback)\n\nreturns active ids in Digital Oceans API form\n\n```\n{\"status\":\"OK\",\"droplets\":[{\"backups_active\":null,\"id\":100823,\"image_id\":420,\"name\":\"test222\",\"region_id\":1,\"size_id\":33,\"status\":\"active\"}]}\n```\n\n## brinydeep.new_droplets = function (options,callback)\n\ncreates a new droplet\n\nOptions:\n*name Required, String, this is the name of the droplet - must be formatted by hostname rules\n*size_id Required, Numeric, this is the id of the size you would like the droplet created at\n*image_id Required, Numeric, this is the id of the image you would like the droplet created with\n*region_id Required, Numeric, this is the id of the region you would like your server in IE: US/Amsterdam\n*ssh_key_ids Optional, Numeric CSV, comma separated list of ssh_key_ids that you would like to be added to the server\n\n```\n{\"status\":\"OK\",\"droplet\":{\"id\":100824,\"name\":\"test\",\"image_id\":419,\"size_id\":32,\"event_id\":7499}}\n```\n\n## brinydeep.reboot(ids,callback)\n\nreboots droplets\n\n```\n{\"status\":\"OK\",\"event_id\":7501}\n```\n\n## brinydeep.power_cycle(ids,callback)\n\npower cycles droplets\n\n```\n{\"status\":\"OK\",\"event_id\":7501}\n```\n\n## brinydeep.shut_down(ids,callback)\n\nshuts off droplets\n\n```\n{\"status\":\"OK\",\"event_id\":7501}\n```\n\n## brinydeep.power_off(ids,callback)\n\npowers off droplets\n\n```\n{\"status\":\"OK\",\"event_id\":7501}\n```\n\n## brinydeep.power_on(ids,callback)\n\npowers on droplets\n\n```\n{\"status\":\"OK\",\"event_id\":7501}\n```\n\n## brinydeep.reset_root_password(ids,callback)\n\nThis method will reset the root password for a droplet. Please be aware that this will reboot the droplet to allow resetting the password.\n\n```\n{\"status\":\"OK\",\"event_id\":7501}\n```\n\n## brinydeep.resize(ids,size_id,callback)\n\nThis method will resize a droplet based on id size\n\n```\n{\"status\":\"OK\",\"event_id\":7501}\n```\n\n## brinydeep.snapshot(id,name,callback)\n\nThis method will take a snapshot of a droplet (this will only take one id as an arg)\n\n```\n{\"status\":\"OK\",\"event_id\":7504}\n```\n\n## brinydeep.restore(ids,name,callback)\n\nThis method allows you to restore a droplet with a previous image or snapshot. This will be a mirror copy of the image or snapshot to your droplet. Be sure you have backed up any necessary information prior to restore.\n\n```\n{\"status\":\"OK\",\"event_id\":7504}\n```\n\n## brinydeep.rebuild(ids,image_id,callback)\n\nThis method allows you to reinstall a droplet with a default image. This is useful if you want to start again but retain the same IP address for your droplet.\n\n```\n{\"status\":\"OK\",\"event_id\":7504}\n```\n\n## brinydeep.enable_backups(ids,callback)\n\nThis method enables automatic backups which run in the background daily to backup your droplet's data.\n\n```\n{\"status\":\"OK\",\"event_id\":7504}\n```\n\n## brinydeep.disable_backups(ids,callback)\n\nThis method disables automatic backups.\n\n```\n{\"status\":\"OK\",\"event_id\":7504}\n```\n\n## brinydeep.destroy_all_droplets(callback)\n\nThis method destroys all droplets.\n\n```\n{\"status\":\"OK\",\"event_id\":7504}\n```\n\n## brinydeep.destroy_all_droplets(ids,callback)\n\nThis method destroys droplets provided their ids.\n\n```\n{\"status\":\"OK\",\"event_id\":7504}\n```\n\n## brinydeep.regions(callback)\n\nReturns all regions.\n\n```\n{\"status\":\"OK\",\"regions\":[{\"id\":1,\"name\":\"New York 1\"},{\"id\":2,\"name\":\"Amsterdam 1\"}]}\n```\n\n\n## brinydeep.all_images(callback)\n\nReturns all images.\n\n```\n{\"status\":\"OK\",\"images\":[{\"id\":429,\"name\":\"Real Backup 10242011\",\"distribution\":\"Ubuntu\"},{\"id\":430,\"name\":\"test233\",\"distribution\":\"Ubuntu\"},{\"id\":431,\"name\":\"test888\",\"distribution\":\"Ubuntu\"},{\"id\":442,\"name\":\"tesah22\",\"distribution\":\"Ubuntu\"},{\"id\":443,\"name\":\"testah33\",\"distribution\":\"Ubuntu\"},{\"id\":444,\"name\":\"testah44\",\"distribution\":\"Ubuntu\"},{\"id\":447,\"name\":\"ahtest55\",\"distribution\":\"Ubuntu\"},{\"id\":448,\"name\":\"ahtest66\",\"distribution\":\"Ubuntu\"},{\"id\":449,\"name\":\"ahtest77\",\"distribution\":\"Ubuntu\"},{\"id\":458,\"name\":\"Rails3-1Ruby1-9-2\",\"distribution\":\"Ubuntu\"},{\"id\":466,\"name\":\"NYTD Backup 1-18-2012\",\"distribution\":\"Ubuntu\"},{\"id\":478,\"name\":\"NLP Final\",\"distribution\":\"Ubuntu\"},{\"id\":540,\"name\":\"API - Final\",\"distribution\":\"Ubuntu\"},{\"id\":577,\"name\":\"test1-1\",\"distribution\":\"Ubuntu\"},{\"id\":578,\"name\":\"alec snapshot1\",\"distribution\":\"Ubuntu\"}]}\n```\n\n## brinydeep.show_images(image_ids,callback)\n\nShows images for given ids.\n\n```\n{\"status\":\"OK\",\"image\":{\"id\":429,\"name\":\"Real Backup 10242011\",\"distribution\":\"Ubuntu\"}}\n```\n\n## brinydeep.destroy_images(image_ids,callback)\n\ndestroys images for given ids.\n\n```\n{\"status\":\"OK\",\"image\":{\"id\":429,\"name\":\"Real Backup 10242011\",\"distribution\":\"Ubuntu\"}}\n```\n\n## brinydeep.all_ssh_keys(callback)\n\nshows all ssh keys\n\n```\n{\"status\":\"OK\",\"ssh_keys\":[{\"id\":10,\"name\":\"office-imac\"},{\"id\":11,\"name\":\"macbook-air\"}]}\n```\n\n## brinydeep.show_ssh_keys(ids,callback)\n\nshows all ssh keys\n\n```\n{\"status\":\"OK\",\"ssh_keys\":[{\"id\":10,\"name\":\"office-imac\"},{\"id\":11,\"name\":\"macbook-air\"}]}\n```\n\n## brinydeep.sizes(callback)\n\nshows all different sizes \n\n```\n{\"status\":\"OK\",\"sizes\":[{\"id\":33,\"name\":\"512MB\"},{\"id\":34,\"name\":\"1GB\"},{\"id\":35,\"name\":\"2GB\"},{\"id\":36,\"name\":\"4GB\"},{\"id\":37,\"name\":\"8GB\"},{\"id\":38,\"name\":\"16GB\"}]}\n```\n\n# license\n\nMIT\n"]],"start1":0,"start2":0,"length1":0,"length2":6696}]],"length":6696}
{"contributors":[],"silentsave":false,"ts":1368498607910,"patch":[[{"diffs":[[0,"======\n\n"],[1,"* 0.5 notes \n*   fixed several bugs due with untested functions\n*   seperated requesting logic for the api exposure functions\n*   added a ip providing event emitter to allow an event to be throw to client when an event is picked up\n\n* TODO\n*   ensure 100% test coverage\n*   implement ssh functionality\n\n"],[0,"node.js "]],"start1":15,"start2":15,"length1":16,"length2":319}]],"length":6999,"saved":false}
{"ts":1368498666826,"patch":[[{"diffs":[[0,"ionality"],[1,"\n*   clean up credentials string handling so it is only in one file"],[0,"\n\nnode.j"]],"start1":316,"start2":316,"length1":16,"length2":83}]],"length":7066,"saved":false}
